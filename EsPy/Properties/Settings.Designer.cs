//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace EsPy.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("COMx")]
        public string PortName {
            get {
                return ((string)(this["PortName"]));
            }
            set {
                this["PortName"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("115200")]
        public int PyBaudRate {
            get {
                return ((int)(this["PyBaudRate"]));
            }
            set {
                this["PyBaudRate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string PyPortBoardType {
            get {
                return ((string)(this["PyPortBoardType"]));
            }
            set {
                this["PyPortBoardType"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("4")]
        public int PythonIndent {
            get {
                return ((int)(this["PythonIndent"]));
            }
            set {
                this["PythonIndent"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool EolVisible {
            get {
                return ((bool)(this["EolVisible"]));
            }
            set {
                this["EolVisible"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool WhitespaceVisible {
            get {
                return ((bool)(this["WhitespaceVisible"]));
            }
            set {
                this["WhitespaceVisible"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool TerminalShowEol {
            get {
                return ((bool)(this["TerminalShowEol"]));
            }
            set {
                this["TerminalShowEol"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool TerminalShowWhitespace {
            get {
                return ((bool)(this["TerminalShowWhitespace"]));
            }
            set {
                this["TerminalShowWhitespace"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("http://docs.micropython.org")]
        public string MicropythonDocUrl {
            get {
                return ((string)(this["MicropythonDocUrl"]));
            }
            set {
                this["MicropythonDocUrl"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string ProjectsFolder {
            get {
                return ((string)(this["ProjectsFolder"]));
            }
            set {
                this["ProjectsFolder"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string PythonExe {
            get {
                return ((string)(this["PythonExe"]));
            }
            set {
                this["PythonExe"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string EspToolPy {
            get {
                return ((string)(this["EspToolPy"]));
            }
            set {
                this["EspToolPy"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string FrimwareBin {
            get {
                return ((string)(this["FrimwareBin"]));
            }
            set {
                this["FrimwareBin"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("460800")]
        public int EspToolBaud {
            get {
                return ((int)(this["EspToolBaud"]));
            }
            set {
                this["EspToolBaud"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5000")]
        public int PyPortReadTmeout {
            get {
                return ((int)(this["PyPortReadTmeout"]));
            }
            set {
                this["PyPortReadTmeout"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5000")]
        public int PyPortWriteTimeout {
            get {
                return ((int)(this["PyPortWriteTimeout"]));
            }
            set {
                this["PyPortWriteTimeout"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\\r\\n")]
        public string PyPortLineSeparator {
            get {
                return ((string)(this["PyPortLineSeparator"]));
            }
            set {
                this["PyPortLineSeparator"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool ShowPyServer {
            get {
                return ((bool)(this["ShowPyServer"]));
            }
            set {
                this["ShowPyServer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5005")]
        public int PyServerPort {
            get {
                return ((int)(this["PyServerPort"]));
            }
            set {
                this["PyServerPort"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int EspToolDeviceIndex {
            get {
                return ((int)(this["EspToolDeviceIndex"]));
            }
            set {
                this["EspToolDeviceIndex"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("src")]
        public string Workpath {
            get {
                return ((string)(this["Workpath"]));
            }
            set {
                this["Workpath"] = value;
            }
        }
        
        /// <summary>
        /// 扩展行距
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("扩展行距")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public int ExtraAscent {
            get {
                return ((int)(this["ExtraAscent"]));
            }
            set {
                this["ExtraAscent"] = value;
            }
        }
        
        /// <summary>
        /// 扩展行距
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("扩展行距")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public int ExtraDescent {
            get {
                return ((int)(this["ExtraDescent"]));
            }
            set {
                this["ExtraDescent"] = value;
            }
        }
        
        /// <summary>
        /// 自动合闭字符
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("自动合闭字符")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool InsertMatchedChars {
            get {
                return ((bool)(this["InsertMatchedChars"]));
            }
            set {
                this["InsertMatchedChars"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int fontsize {
            get {
                return ((int)(this["fontsize"]));
            }
            set {
                this["fontsize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string Setting {
            get {
                return ((string)(this["Setting"]));
            }
            set {
                this["Setting"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ACCEL_X|ACCEL_Y|ACCEL_Z|ADC|ADCWiPy|AF_INET|AF_INET6|ALTITUDE|ARRAY|AbstractBlock" +
            "Dev|AbstractNIC|BIG_ENDIAN|BLE|BytesIO|CAN.BUS_OFF|CAN.ERROR_ACTIVE|CAN.ERROR_PA" +
            "SSIVE|CAN.ERROR_WARNING|CAN.LIST16|CAN.LIST32|CAN.LOOPBACK|CAN.MASK16|CAN.MASK32" +
            "|CAN.NORMAL|CAN.SILENT|CAN.SILENT_LOOPBACK|CAN.STOPPED|CC3K|CC3K.WEP|CC3K.WPA|CC" +
            "3K.WPA2|CPython|CircuitPython|Collector|DEBUG|DESC|DIE_TEMP|DecompIO|DiskAccess|" +
            "Event|Exception|ExtInt.IRQ_FALLING|ExtInt.IRQ_RISING|ExtInt.IRQ_RISING_FALLING|F" +
            "FI|FLOAT32|FLOAT64|FileIO|Flash|FlashArea|FrameBuffer|GPIO|GYRO_X|GYRO_Y|GYRO_Z|" +
            "Garbage|HEAP_DATA|HEAP_EXEC|HUMIDITY|I2C|I2C.CONTROLLER|I2C.PERIPHERAL|I2S|I2S.M" +
            "ONO|I2S.RX|I2S.STEREO|I2S.TX|INCL|INT16|INT32|INT64|INT8|IPPROTO_SEC|IPPROTO_TCP" +
            "|IPPROTO_UDP|KeyboardInterrupt|LCD160CR|LCD160CR.h|LCD160CR.w|LIGHT|LITTLE_ENDIA" +
            "N|Lock|Loop|MAGN_X|MAGN_Y|MAGN_Z|MCU|MICROPYINSPECT|MICROPYPATH|MicroPython|NATI" +
            "VE|NVS|NeoPixel|PIO|PIO.IN_HIGH|PIO.IN_LOW|PIO.IRQ_SM0|PIO.IRQ_SM1|PIO.IRQ_SM2|P" +
            "IO.IRQ_SM3|PIO.JOIN_NONE|PIO.JOIN_RX|PIO.JOIN_TX|PIO.OUT_HIGH|PIO.OUT_LOW|PIO.SH" +
            "IFT_LEFT|PIO.SHIFT_RIGHT|PRESS|PROX|PTR|PWM|Partition|Partition.BOOT|Partition.R" +
            "UNNING|Partition.TYPE_APP|Partition.TYPE_DATA|Pin|Pin.AF_OD|Pin.AF_PP|Pin.ALT|Pi" +
            "n.ALT_OPEN_DRAIN|Pin.ANALOG|Pin.HIGH_POWER|Pin.IN|Pin.IRQ_FALLING|Pin.IRQ_HIGH_L" +
            "EVEL|Pin.IRQ_LOW_LEVEL|Pin.IRQ_RISING|Pin.LOW_POWER|Pin.MED_POWER|Pin.OPEN_DRAIN" +
            "|Pin.OUT|Pin.OUT_OD|Pin.OUT_PP|Pin.PULL_DOWN|Pin.PULL_HOLD|Pin.PULL_NONE|Pin.PUL" +
            "L_UP|REPL|RMT|RTC|RTC.ALARM0|SD|SDCard|SOCK_DGRAM|SOCK_STREAM|SPI|SPI.CONTROLLER" +
            "|SPI.LSB|SPI.MSB|SPI.PERIPHERAL|Sensor|Server|Signal|SoftI2C|SoftSPI|StateMachin" +
            "e|StopIteration|Stream|StringIO|SystemExit|Task|TextIOWrapper|ThreadSafeFlag|Tim" +
            "er|Timer.A|Timer.B|Timer.MATCH|Timer.NEGATIVE|Timer.ONE_SHOT|Timer.PERIODIC|Time" +
            "r.POSITIVE|Timer.PWM|Timer.TIMEOUT|TimerWiPy|TimerWiPy.ONE_SHOT|TimerWiPy.PERIOD" +
            "IC|UART|UART.CTS|UART.RTS|UART.RX_ANY|UINT16|UINT32|UINT64|UINT8|ULP|USB_VCP.CTS" +
            "|USB_VCP.IRQ_RX|USB_VCP.RTS|UUID|Unix|VOID|VfsFat|VfsLfs1|VfsLfs2|WDT|WIZNET5K|W" +
            "LAN|WLANWiPy|WLANWiPy.AP|WLANWiPy.EXT_ANT|WLANWiPy.INT_ANT|WLANWiPy.STA|WLANWiPy" +
            ".WEP|WLANWiPy.WPA|WLANWiPy.WPA2|__call__()|__contains__()|__delitem__()|__getite" +
            "m__()|__init__()|__iter__()|__len__()|__setitem__()|__str__()|_thread|a2b_base64" +
            "()|abs()|abstract|accept()|acos()|acosh()|acquire()|active()|adcchannel()|add_pr" +
            "ogram()|addressof()|aes|af()|af_list()|aiter()|alarm()|alarm_left()|all()|alloc_" +
            "emergency_exception_buf()|alt_list()|anext()|angle()|antenna()|any()|append()|ar" +
            "gv|array|as|ascii()|asin()|asinh()|asm_pio()|asm_pio_encode()|atan()|atan2()|ata" +
            "nh()|atexit()|atten()|auth()|b2a_base64()|baremetal|base|bin()|binascii|bind()|b" +
            "itstream()|blit()|bluetooth|board|bool|bool()|bootloader()|break|breakpoint()|bt" +
            "ree|buffer|built-in|bytearray|bytearray()|bytearray_at()|bytecode|byteorder|byte" +
            "s|bytes()|bytes_at()|calcsize()|calibration()|call_exception_handler()|callable(" +
            ")|callback()|callee-owned|cancel()|capture()|case|catch|ceil()|channel()|chdir()" +
            "|checked|chr()|classmethod()|clear()|clearfilter()|clock_div()|close()|cmath|col" +
            "lect()|collections|command|command()|commit()|compare()|compile()|complex|comple" +
            "x()|config()|connect()|const()|continue|contrast()|copysign()|cos()|cosh()|count" +
            "er()|create_task()|cross-compiler|cryptolib|current_task()|current_tid()|datetim" +
            "e()|debug()|decompress()|decrypt()|deepsleep()|default|default_exception_handler" +
            "()|degrees()|deinit()|delattr()|delay()|delegate|deque()|dict|dict()|digest()|di" +
            "r()|disable()|disable_irq()|disconnect()|divmod()|do|dot()|dot_no_clip()|drain()" +
            "|drive()|driver|dump()|dumps()|dupterm()|duty_cycle()|duty_ns()|duty_u16()|elaps" +
            "ed_micros()|elapsed_millis()|else|enable()|enable_irq()|encrypt()|end()|enumerat" +
            "e()|environment|erase()|erase_key()|erf()|erfc()|errno|error|code|esp|esp32|esp3" +
            "2.WAKEUP_ALL_LOW|esp32.WAKEUP_ANY_HIGH|eval()|event|exec()|exit()|exp()|explicit" +
            "|expm1()|extend()|extern|fabs()|false|fast_spi()|fault_debug()|feed()|feed_wdt()" +
            "|filesystem|fill()|fill_rect()|filter()|filtered_xyz()|finally|find()|fixed|flas" +
            "h_erase()|flash_id()|flash_read()|flash_size()|flash_user_start()|flash_write()|" +
            "float|float()|floor()|flush()|fmod()|for|foreach|format()|framebuf|framebuf.GS2_" +
            "HMSB|framebuf.GS4_HMSB|framebuf.GS8|framebuf.MONO_HLSB|framebuf.MONO_HMSB|frameb" +
            "uf.MONO_VLSB|framebuf.RGB565|freq()|frexp()|from_bytes()|frozen|frozenset|frozen" +
            "set()|function|gamma()|gap_advertise()|gap_connect()|gap_disconnect()|gap_pair()" +
            "|gap_passkey()|gap_scan()|gather()|gattc_discover_characteristics()|gattc_discov" +
            "er_descriptors()|gattc_discover_services()|gattc_exchange_mtu()|gattc_read()|gat" +
            "tc_write()|gatts_indicate()|gatts_notify()|gatts_read()|gatts_register_services(" +
            ")|gatts_set_buffer()|gatts_write()|gc|get()|get_blob()|get_event_loop()|get_exce" +
            "ption_handler()|get_extra_info()|get_float()|get_i32()|get_int()|get_line()|get_" +
            "micros()|get_millis()|get_next_update()|get_pixel()|get_touch()|getaddrinfo()|ge" +
            "tattr()|getcwd()|getvalue()|globals()|gmtime()|goto|gpio()|group()|groups()|hall" +
            "_sensor()|hard_reset()|hasattr()|hash()|hashlib|hashlib.md5|hashlib.sha1|hashlib" +
            ".sha256|have_cdc()|heap|heap_lock()|heap_locked()|heap_unlock()|heapify()|heappo" +
            "p()|heappush()|heapq|heartbeat()|help()|hex()|hexdigest()|hexlify()|hid()|high()" +
            "|hline()|id()|idf_heap_info()|idle()|if|ifconfig()|ilistdir()|implementation|imp" +
            "licit|import|in|index()|inet_ntop()|inet_pton()|info()|init()|initfilterbanks()|" +
            "input()|int|int()|intensity()|interface|internal|interned|io|ioctl()|ipoll()|irq" +
            "()|is|is_preempt_thread()|is_ready()|is_set()|is_touched()|isconnected()|isfinit" +
            "e()|isinf()|isinstance()|isnan()|isrunning()|issubclass()|items()|iter()|jpeg()|" +
            "jpeg_data()|jpeg_start()|json|kbd_intr()|keys()|l2cap_connect()|l2cap_disconnect" +
            "()|l2cap_listen()|l2cap_recvinto()|l2cap_send()|lcd160cr|lcd160cr.LANDSCAPE|lcd1" +
            "60cr.LANDSCAPE_UPSIDEDOWN|lcd160cr.PORTRAIT|lcd160cr.PORTRAIT_UPSIDEDOWN|lcd160c" +
            "r.STARTUP_DECO_INFO|lcd160cr.STARTUP_DECO_MLOGO|lcd160cr.STARTUP_DECO_NONE|ldexp" +
            "()|len()|lgamma()|light()|lightsleep()|line|line()|line_no_clip()|list|list()|li" +
            "stdir()|listen()|load()|load_binary()|loads()|locals()|localtime()|lock|locked()" +
            "|log()|log10()|log2()|loop()|low()|mac()|machine|machine.DEEPSLEEP|machine.DEEPS" +
            "LEEP_RESET|machine.HARD_RESET|machine.IDLE|machine.PIN_WAKE|machine.PWRON_RESET|" +
            "machine.RTC_WAKE|machine.SLEEP|machine.SOFT_RESET|machine.WDT_RESET|machine.WLAN" +
            "_WAKE|main()|makefile()|map()|mapper()|mark_app_valid_cancel_rollback()|match()|" +
            "math|max()|maxsize|measure()|mem_alloc()|mem_free()|mem_info()|mem_read()|mem_wr" +
            "ite()|memoryview|memoryview()|micropython|micropython-lib|micros()|millis()|min(" +
            ")|mkdir()|mkfs()|mktime()|mode()|modf()|modify()|mount()|name()|namedtuple()|nam" +
            "es()|namespace|native|neopixel|network|network.Server|new|new_event_loop()|next(" +
            ")|noise()|now()|null|object|object()|oct()|off()|on()|open()|open_connection()|o" +
            "perator|opt_level()|option|ord()|os|out|override|pack()|pack_into()|params|patch" +
            "_program()|patch_version()|path|period()|phase()|phy_mode()|pi|pin()|pixel()|pla" +
            "tform|polar()|poll()|poly_dot()|poly_line()|popleft()|port|port()|pow()|prescale" +
            "r()|print()|print_exception()|private|property()|protected|protocol|public|pull(" +
            ")|pulse_width()|pulse_width_percent()|put()|pyb|pyb.ADC|pyb.Accel|pyb.CAN|pyb.DA" +
            "C|pyb.ExtInt|pyb.Flash|pyb.I2C|pyb.LCD|pyb.LED|pyb.Pin|pyb.RTC|pyb.SPI|pyb.Servo" +
            "|pyb.Switch|pyb.Timer|pyb.UART|pyb.USB_HID|pyb.USB_VCP|qstr_info()|radians()|ran" +
            "ge()|raw_temperature()|re|read()|read_timed()|read_timed_multi()|read_u16()|read" +
            "blocks()|readchar()|readexactly()|readfrom()|readfrom_into()|readfrom_mem()|read" +
            "from_mem_into()|readinto()|readline()|readlines()|readonly|rect()|rect_interior(" +
            ")|rect_interior_no_clip()|rect_no_clip()|rect_outline()|rect_outline_no_clip()|r" +
            "ecv()|recvfrom()|ref|reg()|register()|regs()|release()|remove()|remove_program()" +
            "|rename()|repl_uart()|repr()|reset()|reset_cause()|restart()|return|reversed()|r" +
            "gb()|rmdir()|rng()|round()|rp2|run()|run_forever()|run_until_complete()|rx_fifo(" +
            ")|rxcallback()|save_to_flash()|scan()|schedule()|screen_dump()|screen_load()|scr" +
            "oll()|sealed|search()|select|select()|send()|send_recv()|sendall()|sendbreak()|s" +
            "endto()|set|set()|set_blob()|set_boot()|set_brightness()|set_exception_handler()" +
            "|set_font()|set_i2c_addr()|set_i32()|set_native_code_location()|set_orient()|set" +
            "_pen()|set_pixel()|set_pos()|set_power()|set_scroll()|set_scroll_buf()|set_scrol" +
            "l_win()|set_scroll_win_param()|set_spi_win()|set_startup_deco()|set_text_color()" +
            "|set_uart_baudrate()|set_wakeup_period()|setattr()|setblocking()|setfilter()|set" +
            "interrupt()|setsockopt()|settimeout()|shell_exec()|shift()|show()|show_framebuf(" +
            ")|sin()|sinh()|sizeof|sizeof()|sleep()|sleep_ms()|sleep_type()|sleep_us()|slice|" +
            "slice()|slicea()|socket|socket()|socket.error|soft_reset()|sorted()|source_freq(" +
            ")|span()|speed()|split()|sqrt()|ssid()|ssl|ssl.CERT_NONE|ssl.CERT_OPTIONAL|ssl.C" +
            "ERT_REQUIRED|ssl.SSLError|ssl.wrap_socket()|stack_use()|stackalloc|standby()|sta" +
            "rt()|start_server()|stat()|state()|state_machine()|staticmethod()|status()|statv" +
            "fs()|stderr|stdin|stdout|stop()|str|str()|stream|string|struct|sub()|sum()|super" +
            "()|swint()|switch|sync()|sys|tan()|tanh()|text()|this|thread_analyze()|threshold" +
            "()|throw|ticks_add()|ticks_cpu()|ticks_diff()|ticks_ms()|ticks_us()|tilt()|time|" +
            "time()|time_ns()|time_pulse_us()|timeout()|to_bytes()|toggle()|touch_config()|tr" +
            "iangle()|true|trunc()|try|tuple|tuple()|tx_fifo()|type()|typeof|uarray|uasyncio|" +
            "ubinascii|ubluetooth|ucollections|ucryptolib|uctypes|udelay()|uerrno|uhashlib|uh" +
            "eapq|uio|ujson|umount()|uname()|unchecked|unhexlify()|unique_id()|unmount()|unpa" +
            "ck()|unpack_from()|unregister()|unsafe|uos|update()|upip|urandom()|ure|usb_mode(" +
            ")|uselect|using|usocket|ussl|ustruct|usys|utime|uzlib|value()|values()|variable|" +
            "vars()|version|version_info|virtual|vline()|wait()|wait_closed()|wait_done()|wai" +
            "t_for()|wait_for_ms()|wake_on_ext0()|wake_on_ext1()|wake_on_touch()|wake_reason(" +
            ")|wakeup()|wfi()|while|width()|wipy|write()|write_pulses()|write_readinto()|writ" +
            "e_timed()|writeblocks()|writechar()|writeto()|writeto_mem()|writevto()|zephyr|zi" +
            "p()|zlib|zsensor")]
        public string keywords {
            get {
                return ((string)(this["keywords"]));
            }
            set {
                this["keywords"] = value;
            }
        }
    }
}
